apply plugin: "idea"

idea.module {
    excludeDirs += files(".idea", "docs", "gradle", "libs", "run", "run-client", "run-server")
}

task addLibraryTransformers {
    fileTree(dir: "libs", include: "*.jar").each { jar ->
        zipTree(jar).each { file ->
            if(file.name.endsWith("_at.cfg")) {
                println("Found AccessTransformer in library: ${file.name}")
                deobfBinJar.addTransformer(file)
                deobfuscateJar.addTransformer(file)
            }
        }
    }
}

tasks.setupDecompWorkspace.dependsOn(addLibraryTransformers)

ext.modSourceFile = "${modClass.replace('.', '/')}.scala"

minecraft {
    version = forgeVersion
    replaceIn modSourceFile
        replace "SNAPSHOT", modVersion
        replace "required-after:farseek", "required-after:farseek@$farseekDependency"
}

version = modVersion

jar.manifest {
    attributes "FMLCorePlugin": coreModClass
    attributes "FMLCorePluginContainsFMLMod": "yeah it does"
    attributes "FMLAT": accessTransformer
}

if(project.hasProperty("curseForgeApiKey")) {
    apply plugin: "curseforge"
    curse {
        apiKey      = curseForgeApiKey
        projectId   = curseForgeId
        releaseType = curseForgeReleaseType
        changelog   = curseForgeChangelog
    }
    if(farseekDependency != "") {
        curse.relatedProject "Farseek": "requiredLibrary"
    }
}
