package farseek

import cpw.mods.fml.common.Mod.EventHandler
import cpw.mods.fml.common._
import cpw.mods.fml.common.event._
import farseek.config._
import farseek.util.Logging
import java.io.PrintWriter
import java.nio.file.Files._
import java.nio.file._
import scala.collection.JavaConversions._

/** Convenience base class for Farseek mods. Provides configuration and metadata support.
  * @author delvr
  */
abstract class FarseekBaseMod extends Logging {

    val id = getClass.getAnnotation(classOf[Mod]).modid

    private lazy val outputFile = {
        val path = Paths.get("logs", s"$name.out")
        createDirectories(path.getParent)
        new PrintWriter(newBufferedWriter(path), true)
    }

    def name: String
    def description: String
    def authors: Seq[String]

    def configuration: Option[ConfigRoot]

    /** If true, worlds created without this mod cannot be loaded while the mod is active.
      * An onscreen message will inform the user of this. */
    def requiresNewWorld = false

    /** If defined, worlds created without this mod can be loaded but only after the user confirms the onscreen warning. */
    def existingWorldWarning: Option[String] = None

    def printout(line: Any) {
        outputFile.println(line)
    }

    def printout() {
        outputFile.println()
    }

    /** Sets mod metadata from member defs. Programmable alternative to using a Forge mcmod.info file. */
    @EventHandler def handle(event: FMLPreInitializationEvent) {
        val meta = event.getModMetadata
        meta.autogenerated = false
        meta.name = name
        meta.description = description
        meta.authorList = authors
    }
}
